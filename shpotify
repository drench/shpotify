#!/usr/bin/env zsh

zmodload zsh/stat

full_cmd=$0
cmd=$(basename "$full_cmd")

warn() { >&2 echo $* }
die() { warn $*; exit 111 }

SHPOTIFY_CONFIG_DIR=${SHPOTIFY_CONFIG_DIR:-~/.config/shpotify}
env_dir="$SHPOTIFY_CONFIG_DIR/.env.d"
[[ -e "$env_dir" ]] || die "${env_dir} does not exist!"
[[ -z "$(ls -A "$env_dir")" ]] && die "${env_dir} is empty!"
for env_file in $env_dir/*; do
  key=$(basename "$env_file")
  value=$(cat "$env_file")
  export "$key=$value"
done

spotify_api_get() {
  refresh_token_if_outdated
  url=$1
  [[ "$url" = https://api.spotify.com/* ]] || url="https://api.spotify.com/$1"

  curl --silent -H "Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN}" "$url" | jq .
}

fetch_refresh_token() {
  curl \
    --silent \
    -d "client_id=${SPOTIFY_CLIENT_ID}" \
    -d "client_secret=${SPOTIFY_CLIENT_SECRET}" \
    -d "grant_type=refresh_token" \
    -d "refresh_token=${SPOTIFY_REFRESH_TOKEN}" \
    https://accounts.spotify.com/api/token | jq -r '.access_token'
}

refresh_token_if_outdated() {
  token_mtime=$(zstat +mtime "$env_dir/SPOTIFY_ACCESS_TOKEN")
  now=$(date +%s)
  delta=$(($now - $token_mtime))
  [[ "$delta" -lt 3000 ]] && return
  warn "Refreshing the spotify access token"
  new_token=$(fetch_refresh_token)
  [[ "$new_token" = "null" ]] && die "No token returned"
  [[ -z "$new_token" ]] && die "Token is empty ???"
  echo "$new_token" > "$env_dir/SPOTIFY_ACCESS_TOKEN"
  export "SPOTIFY_ACCESS_TOKEN=$new_token"
}

get_me_playlists() {
  next_url=v1/me/playlists
  items=()

  while ([ -n "$next_url" ] && [ "$next_url" != "null" ]); do
    resp=$(spotify_api_get "$next_url")
    new_items=$(echo "$resp" | jq .items)
    items=($items $new_items)
    next_url="$(echo "$resp" | jq -r .next)"
    sleep 1
  done

  echo $items | jq -s add
}

actions=(me)

action=$1; shift
case "$action" in
  me)
    case "$1" in
      --completion) echo playlists; exit 0 ;;
      "") spotify_api_get v1/me ;;
      playlists) get_me_playlists ;;
      *) die "bad argument '$1'" ;;
    esac
    ;;
  --completion) printf "%s\n" $actions ;;
  --completion-code)
    cmd=$(basename "$full_cmd")
    echo "compctl -K _${cmd} ${cmd}"
    echo "_${cmd}() {"
    echo '  local words; read -cA words; shift -p words'
    echo '  reply=($($words --completion))'
    echo '}'
    ;;
  *) die "Usage: $full_cmd [ $actions ]" ;;
esac
