#!/usr/bin/env zsh

set -e

zmodload zsh/stat

full_cmd=$0
cmd=$(basename "$full_cmd")

warn() { >&2 echo $* }
die() { warn $*; exit 111 }

export SHPOTIFY_CONFIG_DIR=${SHPOTIFY_CONFIG_DIR:-~/.config/shpotify}
env_dir="$SHPOTIFY_CONFIG_DIR/.env.d"
[[ -e "$env_dir" ]] || die "${env_dir} does not exist!"
[[ -z "$(ls -A "$env_dir")" ]] && die "${env_dir} is empty!"
for env_file in $env_dir/*; do
  key=$(basename "$env_file")
  value=$(cat "$env_file")
  export "$key=$value"
done

export SHPOTIFY_CACHE_DIR=${SHPOTIFY_CACHE_DIR:-~/.cache/shpotify}
[[ -d "$SHPOTIFY_CACHE_DIR" ]] || mkdir -p "$SHPOTIFY_CACHE_DIR"

spotify_api_call() {
  refresh_token_if_outdated
  method=$1
  url=$2
  [[ "$url" = https://api.spotify.com/* ]] || url="https://api.spotify.com/$2"

  raw_response=$(
    curl --silent \
      --request "$method" \
      -H "Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN}" "$url"
  )

  printf "%s\n" "$raw_response" | jq .
}

fetch_refresh_token() {
  curl \
    --silent \
    -d "client_id=${SPOTIFY_CLIENT_ID}" \
    -d "client_secret=${SPOTIFY_CLIENT_SECRET}" \
    -d "grant_type=refresh_token" \
    -d "refresh_token=${SPOTIFY_REFRESH_TOKEN}" \
    https://accounts.spotify.com/api/token | jq -r '.access_token'
}

refresh_token_if_outdated() {
  token_mtime=$(zstat +mtime "$env_dir/SPOTIFY_ACCESS_TOKEN")
  now=$(date +%s)
  delta=$(($now - $token_mtime))
  [[ "$delta" -lt 3000 ]] && return
  warn "Refreshing the spotify access token"
  new_token=$(fetch_refresh_token)
  [[ "$new_token" = "null" ]] && die "No token returned"
  [[ -z "$new_token" ]] && die "Token is empty ???"
  printf "%s\n" "$new_token" > "$env_dir/SPOTIFY_ACCESS_TOKEN"
  SPOTIFY_ACCESS_TOKEN="$new_token"
  export SPOTIFY_ACCESS_TOKEN
}

get_cached_file() {
  file="$SHPOTIFY_CACHE_DIR/$1"
  test -r "$file" || return
  now=$(date +%s)
  cached_at=$(zstat +mtime "$file")
  delta=$(($now - $cached_at))
  if [ "$delta" -gt 3600 ]; then
    rm "$file"
  else
    cat "$file"
  fi
}

get_playlists() {
  [[ "$1" =~ "^[[:alnum:]]+$" ]] || die "Invalid playlist ID '$1'"

  playlist=$(spotify_api_call GET "v1/playlists/$1")
  next_url=$(printf "%s\n" "$playlist" | jq -r ".tracks.next")

  items="$(printf "%s\n" "$playlist" | jq '.tracks.items')"

  while ([ -n "$next_url" ] && [ "$next_url" != "null" ]); do
    sleep 1
    resp=$(spotify_api_call GET "$next_url")
    items="$(jq '. += (input | .items)' <(printf "%s\n" "$items") <(printf "%s\n" "$resp"))"
    next_url="$(printf "%s\n" "$resp" | jq -r ".next")"
    warn "next_url is '${next_url}'"
  done

  jq '.tracks.items |= input' <(printf "%s\n" "$playlist") <(printf "%s\n" "$items")
}

get_paginated() {
  next_url=$1
  selector_prefix=$2

  items=()

  while ([ -n "$next_url" ] && [ "$next_url" != "null" ]); do
    resp=$(spotify_api_call GET "$next_url")
    new_items=$(printf "%s\n" "$resp" | jq "${selector_prefix}.items")
    items=($items $new_items)
    next_url="$(printf "%s\n" "$resp" | jq -r "${selector_prefix}.next")"
    sleep 1
  done

  printf "%s\n" "$items" | jq -s add
}

get_browse_categories() {
  categories=""

  if [ "$1" = "--cached" ]; then
    categories=$(get_cached_file "browse-categories.json")
  fi

  if [ -z "$categories" ]; then
    categories=$(get_paginated v1/browse/categories .categories)
    printf "%s\n" "$categories" > "$SHPOTIFY_CACHE_DIR/browse-categories.json"
  fi

  printf "%s\n" "$categories" | jq -r '.[] | .id'
}

get_me_playlists() {
  all_items=""

  if [ "$1" = "--cached" ]; then
    all_items=$(get_cached_file "me-playlists.json")
  fi

  if [ -z "$all_items" ]; then
    all_items=$(get_paginated v1/me/playlists)
    printf "%s\n" "$all_items" > "$SHPOTIFY_CACHE_DIR/me-playlists.json"
  fi

  printf "%s\n" "$all_items"
}

get_search() {
  next_url="$1"
  items=()

  while ([ -n "$next_url" ] && [ "$next_url" != "null" ]); do
    resp=$(spotify_api_call GET "$next_url")
    new_items=$(printf "%s\n" "$resp" | jq 'to_entries[] | .value.items')
    items=($items $new_items)
    next_url="$(printf "%s\n" "$resp" | jq -r .next)"
    sleep 1
  done

  printf "%s\n" $items | jq -s add
}

verbs=(delete get post put)

verb=$1
noun=$2

case "$verb" in
  --completion) printf "%s\n" $verbs ;;
  --completion-code)
    cmd=$(basename "$full_cmd")
    echo "compctl -K _${cmd} ${cmd}"
    echo "_${cmd}() {"
    echo '  local words; read -cA words; shift -p words'
    echo '  reply=($($words --completion))'
    echo '}'
    ;;
  --raw)
    verb=$2
    url=$3
    spotify_api_call "${verb:u}" "$url"
    ;;
  delete) die $verb ;;
  get)
    case "$noun" in
      --completion)
        printf "%s\n" \
          albums artists browse markets me playlists recommendations search users
        ;;

      albums)
        album=$3
        case "$4" in
          --completion) printf "%s\n" tracks ;;
          "") spotify_api_call GET "v1/albums/$album" ;;
          tracks) get_paginated "v1/albums/$album/tracks" ;;
        esac
        ;;

      artists)
        artist=$3
        case "$4" in
          --completion) printf "%s\n" albums related-artists top-tracks ;;
          "") spotify_api_call GET "v1/artists/$artist" ;;
          albums) get_paginated "v1/artists/$artist/albums" ;;
          related-artists)
            spotify_api_call GET "v1/artists/$artist/related-artists"
            ;;
          top-tracks)
            spotify_api_call GET "v1/artists/$artist/top-tracks?market=US"
            ;;
        esac
        ;;

      browse)
        case "$3" in
          --completion) printf "%s\n" categories ;;
          "") die "" ;;
          categories)
            case "$4" in
              --completion) get_browse_categories --cached ;;
              "") get_paginated v1/browse/categories .categories ;;
              *) spotify_api_call GET "v1/browse/categories/$4" ;;
            esac
            ;;
        esac
        ;;

      markets) test -z "$3" && spotify_api_call GET v1/markets ;;

      me)
        case "$3" in
          --completion) printf "%s\n" albums following player playlists top ;;
          "") spotify_api_call GET v1/me ;;
          albums) test -z "$4" && get_paginated v1/me/albums ;;
          following)
            case "$4" in
              --completion) printf "%s\n" artist ;;
              "") die "" ;;
              *)
                test -z "$5" && get_paginated "v1/me/following?type=$4" .artists
                ;;
            esac
            ;;
          playlists) test -z "$4" && get_me_playlists ;;
          player)
            case "$4" in
              --completion)
                printf "%s\n" currently-playing devices queue recently-played
                ;;
              "") spotify_api_call GET v1/me/player ;;
              currently-playing) spotify_api_call GET v1/me/player/currently-playing ;;
              devices)
                case "$5" in
                  --completion) echo "" ;;
                  "") spotify_api_call GET v1/me/player/devices ;;
                  *) die "" ;;
                esac
                ;;
              queue) spotify_api_call GET v1/me/player/queue ;;
              recently-played) get_paginated v1/me/player/recently-played ;;
            esac
            ;;
          top)
            case "$4" in
              --completion) printf "%s\n" artists tracks ;;
              "") die "" ;;
              *) test -z "$5" && get_paginated "v1/me/top/$4" ;;
            esac
            ;;
        esac
        ;;

      playlists)
        case "$3" in
          --completion) get_me_playlists --cached | jq -r '.[] | .id' ;;
          "") die "" ;;
          *) get_playlists "$3" ;;
        esac
        ;;

      recommendations)
        case "$3" in
          --completion) printf "%s\n" available-genre-seeds ;;
          "") die "" ;;
          available-genre-seeds)
            spotify_api_call GET v1/recommendations/available-genre-seeds
            ;;
        esac
        ;;

      search)
        item_types=(album artist playlist track show episode)

        case "$3" in
          --completion) printf "%s\n" $item_types ;;
          "") die "" ;;
          *)
            case "$4" in
              --completion) die "" ;;
              "") die "" ;;
              *)
                q=$(echo "$4" | jq --raw-input -r '@uri')
                get_search "v1/search?q=${q}&type=$3"
                ;;
            esac
            ;;
        esac
        ;;

      users)
        case "$3" in
          --completion) printf "" ;;
          "") die "" ;;
          *) spotify_api_call GET v1/users/$3 ;;
        esac
        ;;

      "") die "" ;;
    esac
    ;;

  post)
    case "$noun" in
      --completion) printf "%s\n" me ;;
      me)
        case "$3" in
          --completion) printf "%s\n" player ;;
          player)
            case "$4" in
              --completion) printf "%s\n" next previous queue ;;
              next) spotify_api_call POST v1/me/player/next ;;
              previous) spotify_api_call POST v1/me/player/previous ;;
              queue)
                case "$5" in
                  spotify:track:*)
                    spotify_api_call POST "v1/me/player/queue?uri=$5"
                    ;;
                  https://open.spotify.com/track/*)
                    track=${${5##*/}%\?*}
                    spotify_api_call POST "v1/me/player/queue?uri=spotify:track:$track"
                    ;;
                  *) die "" ;;
                esac
                ;;
            esac
            ;;
          *) die "" ;;
        esac
        ;;
      *) die "" ;;
    esac
    ;;

  put)
    case "$noun" in
      --completion) printf "%s\n" me ;;
      "") die "" ;;
      me)
        case "$3" in
          --completion) printf "%s\n" player ;;
          "") die "" ;;
          player)
            case "$4" in
              --completion) printf "%s\n" pause play volume ;;
              "") die "" ;;
              pause) spotify_api_call PUT v1/me/player/pause ;;
              play) spotify_api_call PUT v1/me/player/play ;;
              volume)
                case "$5" in
                  --completion) printf "%s\n" 0 25 50 75 100 ;; # TK up down min max
                  "") die "" ;;
                  *)
                    spotify_api_call PUT "v1/me/player/volume?volume_percent=$5"
                    ;;
                esac
                ;;
            esac
            ;;
        esac
        ;;
    esac
    ;;

  *) die $verb ;;
esac
