#!/usr/bin/env zsh

zmodload zsh/stat

full_cmd=$0
cmd=$(basename "$full_cmd")

warn() { >&2 echo $* }
die() { warn $*; exit 111 }

export SHPOTIFY_CONFIG_DIR=${SHPOTIFY_CONFIG_DIR:-~/.config/shpotify}
env_dir="$SHPOTIFY_CONFIG_DIR/.env.d"
[[ -e "$env_dir" ]] || die "${env_dir} does not exist!"
[[ -z "$(ls -A "$env_dir")" ]] && die "${env_dir} is empty!"
for env_file in $env_dir/*; do
  key=$(basename "$env_file")
  value=$(cat "$env_file")
  export "$key=$value"
done

export SHPOTIFY_CACHE_DIR=${SHPOTIFY_CACHE_DIR:-~/.cache/shpotify}
[[ -d "$SHPOTIFY_CACHE_DIR" ]] || mkdir -p "$SHPOTIFY_CACHE_DIR"

spotify_api_call() {
  refresh_token_if_outdated
  method=$1
  url=$2
  [[ "$url" = https://api.spotify.com/* ]] || url="https://api.spotify.com/$2"

  curl --silent \
    --request "$method" \
    -H "Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN}" "$url" | jq .
}


spotify_api_get() {
  refresh_token_if_outdated
  url=$1
  [[ "$url" = https://api.spotify.com/* ]] || url="https://api.spotify.com/$1"

  curl --silent -H "Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN}" "$url" | jq .
}

fetch_refresh_token() {
  curl \
    --silent \
    -d "client_id=${SPOTIFY_CLIENT_ID}" \
    -d "client_secret=${SPOTIFY_CLIENT_SECRET}" \
    -d "grant_type=refresh_token" \
    -d "refresh_token=${SPOTIFY_REFRESH_TOKEN}" \
    https://accounts.spotify.com/api/token | jq -r '.access_token'
}

refresh_token_if_outdated() {
  token_mtime=$(zstat +mtime "$env_dir/SPOTIFY_ACCESS_TOKEN")
  now=$(date +%s)
  delta=$(($now - $token_mtime))
  [[ "$delta" -lt 3000 ]] && return
  warn "Refreshing the spotify access token"
  new_token=$(fetch_refresh_token)
  [[ "$new_token" = "null" ]] && die "No token returned"
  [[ -z "$new_token" ]] && die "Token is empty ???"
  echo "$new_token" > "$env_dir/SPOTIFY_ACCESS_TOKEN"
  export "SPOTIFY_ACCESS_TOKEN=$new_token"
}

get_playlists() {
  [[ "$1" =~ "^[[:alnum:]]+$" ]] || die "Invalid playlist ID '$1'"
  spotify_api_get "v1/playlists/$1"
}

get_paginated() {
  next_url=$1
  selector_prefix=$2

  items=()

  while ([ -n "$next_url" ] && [ "$next_url" != "null" ]); do
    resp=$(spotify_api_get "$next_url")
    new_items=$(echo "$resp" | jq "${selector_prefix}.items")
    items=($items $new_items)
    next_url="$(echo "$resp" | jq -r "${selector_prefix}.next")"
    sleep 1
  done

  echo $items | jq -s add
}

get_browse_categories() {
  if [ "$1" = "--cached" ]; then
    cache=$(cat "$SHPOTIFY_CACHE_DIR/browse-categories.json" 2> /dev/null)
    if [ -n "$cache" ]; then
      echo $cache | jq -r '.[] | .id'
      return
    fi
  fi

  categories=$(get_paginated v1/browse/categories .categories)
  echo "$categories" > "$SHPOTIFY_CACHE_DIR/browse-categories.json"
  echo "$categories" | jq -r '.[] | .id'
}

get_me_playlists() {
  if [ "$1" = "--cached" ]; then
    cache=$(cat "$SHPOTIFY_CACHE_DIR/me-playlists.json" 2> /dev/null)
    if [ -n "$cache" ]; then
      echo $cache
      return
    fi
  fi

  all_items=$(get_paginated v1/me/playlists)
  echo $all_items > "$SHPOTIFY_CACHE_DIR/me-playlists.json"

  echo $all_items
}

get_search() {
  next_url="$1"
  items=()

  while ([ -n "$next_url" ] && [ "$next_url" != "null" ]); do
    resp=$(spotify_api_get "$next_url")
    new_items=$(echo "$resp" | jq 'to_entries[] | .value.items')
    items=($items $new_items)
    next_url="$(echo "$resp" | jq -r .next)"
    sleep 1
  done

  echo $items | jq -s add
}

actions=(browse markets me playlists recommendations search)

action=$1; shift
case "$action" in
  browse)
    case "$1" in
      --completion) printf "%s\n" categories ;;
      "") die "" ;;
      categories)
        case "$2" in
          --completion) get_browse_categories --cached ;;
          "") get_paginated v1/browse/categories .categories ;;
          *) spotify_api_get "v1/browse/categories/$2" ;;
        esac
        ;;
    esac
    ;;

  markets) [[ -z "$1" ]] && spotify_api_get v1/markets ;;

  me)
    case "$1" in
      --completion) printf "%s\n" albums following player playlists top ;;
      "") spotify_api_get v1/me ;;
      albums) [[ -z "$2" ]] && get_paginated v1/me/albums ;;
      following)
        case "$2" in
          --completion) printf "%s\n" artist ;;
          "") die "" ;;
          *)
            [[ -z "$3" ]] && get_paginated "v1/me/following?type=$2" .artists
            ;;
        esac
        ;;
      playlists) [[ -z "$2" ]] && get_me_playlists ;;
      player)
        case "$2" in
          --completion)
            printf "%s\n" currently-playing devices pause play recently-played
            ;;
          "") spotify_api_get v1/me/player ;;
          currently-playing) spotify_api_get v1/me/player/currently-playing ;;
          devices) spotify_api_get v1/me/player/devices ;;
          pause) spotify_api_call PUT v1/me/player/pause ;;
          play) spotify_api_call PUT v1/me/player/play ;;
          recently-played) get_paginated v1/me/player/recently-played ;;
        esac
        ;;
      top)
        case "$2" in
          --completion) printf "%s\n" artists tracks ;;
          "") die "Please specify either artists or tracks" ;;
          *) [[ -z "$3" ]] && get_paginated "v1/me/top/$2" ;;
        esac
        ;;
      *) die "bad argument '$1'" ;;
    esac
    ;;

  playlists)
    case "$1" in
      --completion) get_me_playlists --cached | jq -r '.[] | .id' ;;
      "") die "Please specify a playlist ID" ;;
      *) get_playlists "$1" ;;
    esac
    ;;

  recommendations)
    case "$1" in
      --completion) printf "%s\n" available-genre-seeds ;;
      "") die "" ;;
      available-genre-seeds)
        spotify_api_get v1/recommendations/available-genre-seeds
        ;;
    esac
    ;;

  search)
    item_types=(album artist playlist track show episode)

    case "$1" in
      --completion) printf "%s\n" $item_types ;;
      "") die "Please specify an item type ($item_types)" ;;
      *)
        [[ -z "$3" ]] || exit 0
        type=$1 # TK make sure it's in $item_types!
        case "$2" in
          --completion) exit 0 ;;
          "") die "Please specify a search query" ;;
          *)
            q=$(echo "$2" | jq --raw-input -r '@uri')
            get_search "v1/search?q=${q}&type=${type}"
            ;;
        esac
        ;;
    esac
    ;;
  --completion) printf "%s\n" $actions ;;
  --completion-code)
    cmd=$(basename "$full_cmd")
    echo "compctl -K _${cmd} ${cmd}"
    echo "_${cmd}() {"
    echo '  local words; read -cA words; shift -p words'
    echo '  reply=($($words --completion))'
    echo '}'
    ;;
  *) die "Usage: $full_cmd [ $actions ]" ;;
esac
