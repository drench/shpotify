#!/usr/bin/env zsh

zmodload zsh/stat

full_cmd=$0
cmd=$(basename "$full_cmd")

warn() { >&2 echo $* }
die() { warn $*; exit 111 }

SHPOTIFY_CONFIG_DIR=${SHPOTIFY_CONFIG_DIR:-~/.config/shpotify}
env_dir="$SHPOTIFY_CONFIG_DIR/.env.d"
[[ -e "$env_dir" ]] || die "${env_dir} does not exist!"
[[ -z "$(ls -A "$env_dir")" ]] && die "${env_dir} is empty!"
for env_file in $env_dir/*; do
  key=$(basename "$env_file")
  value=$(cat "$env_file")
  export "$key=$value"
done

refresh_token() {
  curl \
    --silent \
    -d "client_id=${SPOTIFY_CLIENT_ID}" \
    -d "client_secret=${SPOTIFY_CLIENT_SECRET}" \
    -d "grant_type=refresh_token" \
    -d "refresh_token=${SPOTIFY_REFRESH_TOKEN}" \
    https://accounts.spotify.com/api/token | jq -r '.access_token'
}

refresh_token_if_outdated() {
  token_mtime=$(zstat +mtime "$env_dir/SPOTIFY_ACCESS_TOKEN")
  now=$(date +%s)
  delta=$(($now - $token_mtime))
  [[ "$delta" -lt 3000 ]] && return
  warn "Refreshing the spotify access token"
  new_token=$(refresh_token)
  [[ "$token" = "null" ]] && die "No token returned"
  echo "$token" > "$env_dir/SPOTIFY_ACCESS_TOKEN"
}

refresh_token_if_outdated # do this at API call sites

action=$1
case "$action" in
  --completion)
    warn "this is a warning!"
    ;;
  --completion-code)
    cmd=$(basename "$full_cmd")
    echo "compctl -K _${cmd} ${cmd}"
    echo "_${cmd}() {"
    echo '  local words; read -cA words; shift -p words'
    echo '  reply=($($words --completion))'
    echo '}'
    ;;
  *)
    echo "usage would go here" ;;
esac
