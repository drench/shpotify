#!/bin/sh

. ./shpotify-load-env

out_dir=~/Code/spotify/playlists

spotify_get() {
  echo "Calling $1" > /dev/stderr
  curl \
    --silent \
    -H "Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN}" \
    $1
}

fetch_playlists() {
  n=0
  next_url=https://api.spotify.com/v1/me/playlists

  while [ "$next_url" != "null" ]; do
    outfile="${out_dir}/playlists-part-${n}.json"
    spotify_get $next_url > $outfile
    if [ "$?" != "0" ]; then
      echo "Playlist get $next_url failed" > /dev/stderr
      exit 111
    fi

    next_url=$(jq -r '.next' < $outfile)
    n=$((n+1))
  done
}

playlist_vars() {
  jq -r '@sh "id=\(.id) href=\(.tracks.href) name=\(.name)"'
}

ensure_clean_git_status() {
  if [ -n "$(cd $out_dir && git status --porcelain)" ]; then
    echo "${out_dir} must have a clean git status to continue."
    (cd $out_dir && git status)
    exit 111
  fi
}

remove_old_json_files() {
  rm $out_dir/*.json
}

ensure_clean_git_status
remove_old_json_files
fetch_playlists

for playlist_chunk in ${out_dir}/playlists-part-*.json; do
  echo "Processing ${playlist_chunk}" > /dev/stderr

  jq -c '.items[]' < $playlist_chunk | while read -r playlist_item; do
    eval "$(echo $playlist_item | playlist_vars)"
    echo "Getting playlist $name ($id)" > /dev/stderr

    n=0
    next_url=$href

    while [ "$next_url" != "null" ]; do
      outfile="${out_dir}/${id}-tracks-${n}.json"
      if [ ! -e "$outfile" ]; then
        spotify_get $next_url > $outfile
        if [ "$?" != "0" ]; then
          echo 'API call failed' > /dev/stderr
          exit 111
        fi
      fi

      next_url=$(jq -r '.next' < $outfile)
      n=$((n+1))
    done

    cat $out_dir/$id-tracks-*.json |
      jq -c '.items[]' > "${out_dir}/${id}-tracks.json"

    echo $playlist_item |
      jq --slurpfile items ${out_dir}/${id}-tracks.json \
        '. + { items: $items }' > "${out_dir}/${id}.json"

    rm ${out_dir}/${id}-tracks-*.json ${out_dir}/${id}-tracks.json
  done
done
