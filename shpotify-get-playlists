#!/bin/sh

. ./shpotify-load-env

out_dir=~/Code/spotify/playlists

spotify_get() {
  echo "Calling $1" > /dev/stderr
  curl \
    --silent \
    -H "Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN}" \
    $1
}

playlists() {
  if [ ! -e "${out_dir}/playlists.json" ]; then
    spotify_get https://api.spotify.com/v1/me/playlists > "${out_dir}/playlists.json"
    if [ "$?" != "0" ]; then
      echo 'Playlist get failed' > /dev/stderr
      exit 111
    fi
  fi

  cat "${out_dir}/playlists.json"
}

playlist_vars() {
  jq -r '@sh "id=\(.id) href=\(.tracks.href) name=\(.name)"'
}

ensure_clean_git_status() {
  if [ -n "$(cd $out_dir && git status --porcelain)" ]; then
    echo "${out_dir} must have a clean git status to continue."
    (cd $out_dir && git status)
    exit 111
  fi
}

remove_old_json_files() {
  rm $out_dir/*.json
}

ensure_clean_git_status
remove_old_json_files

playlists | jq -c '.items[]' | while read -r playlist_item; do
  eval "$(echo $playlist_item | playlist_vars)"
  echo "Getting playlist $name ($id)" > /dev/stderr

  n=0
  next_url=$href

  while [ "$next_url" != "null" ]; do
    outfile="${out_dir}/${id}-tracks-${n}.json"
    if [ ! -e "$outfile" ]; then
      spotify_get $next_url > $outfile
      if [ "$?" != "0" ]; then
        echo 'API call failed' > /dev/stderr
        exit 111
      fi
    fi

    next_url=$(jq -r '.next' < $outfile)
    n=$((n+1))
  done

  cat $out_dir/$id-tracks-*.json |
    jq -c '.items[]' > "${out_dir}/${id}-tracks.json"

  echo $playlist_item |
    jq --slurpfile items ${out_dir}/${id}-tracks.json \
      '. + { items: $items }' > "${out_dir}/${id}.json"

  rm ${out_dir}/${id}-tracks-*.json ${out_dir}/${id}-tracks.json
done
